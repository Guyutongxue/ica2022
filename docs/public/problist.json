[{"title":"试手练习（选做，不计入成绩）","id":"570939369cef4ad18de4261b375ba508","problems":[{"title":"1000 A+B Problem","id":"a28e77853698410b9175afc1d409ae0f","description":"<p>Calculate a+b</p>","aboutInput":"<p>Two integer a,b (0<=a,b<=10)</p>","aboutOutput":"<p>Output a+b</p>"},{"title":"计算平均年龄","id":"c19f16062bb64bfba14c61498ddb8707","description":"<p>班上有学生若干名，给出每名学生的年龄（整数），求班上所有学生的平均年龄，保留到小数点后两位。</p>","aboutInput":"<p>第一行有一个整数n（1<= n <= 100），表示学生的人数。其后n行每行有1个整数，取值为15到25。</p>","aboutOutput":"<p>输出一行，该行包含一个浮点数，为要求的平均年龄，保留到小数点后两位。</p>"},{"title":"温度表达转化","id":"e12f686fbe254676b72030f225d1316e","description":"<p>已知华氏气温F，请利用公式 C = 5 * (F-32) / 9 （其中C表示摄氏温度，F表示华氏温度） 计算它对应的摄氏温度C。</p>","aboutInput":"<p>一个整数n，表示下面一共有n个输入\r<br>下面接n行，每行一个实数F，表示华氏温度</p>","aboutOutput":"<p>输出共n行，每行一个实数C，其值为F对应的摄氏温度</p>"},{"title":"例题(3.10) 大象喝水","id":"2bb3a1024ada4f3ca82f88456d150e38","description":"<p>一只大象口渴了，要喝20升水才能解渴，但现在只有一个深h厘米，底面半径为r厘米的小圆桶(h和r都是整数)。问大象至少要喝多少桶水才会解渴。(设PAI=3.14159) </p>","aboutInput":"<p>输入有一行，两个整数：分别表示小圆桶的深h，和底面半径r，单位厘米。 \r<br></p>","aboutOutput":"<p>输出也只有一行，大象至少要喝水的桶数。</p>"},{"title":"习题(8-10) 分数求和","id":"a68317b5106b4120899ca477a889fb29","description":"<p>输入n个分数并对他们求和，用约分之后的最简形式表示。\r<br>比如：\r<br>q/p = x1/y1  + x2/y2 +....+ xn/yn，\r<br>q/p要求是归约之后的形式。\r<br>如：5/6已经是最简形式，3/6需要规约为1/2, 3/1需要规约成3，10/3就是最简形式。\r<br>\r<br>PS:分子和分母都没有为0的情况，也没有出现负数的情况</p>","aboutInput":"<p>第一行的输入n,代表一共有几个分数需要求和\r<br>接下来的n行是分数</p>","aboutOutput":"<p>输出只有一行，即归约后的结果</p>"},{"title":"习题(4-5) 最大数输出","id":"af1dab7ed59e413593e02de88f25aa76","description":"<p>输入三个整数,输出最大的数。</p>","aboutInput":"<p>输入为一行，共三个整数。</p>","aboutOutput":"<p>输出为最大的整数。</p>"},{"title":"最简真分数序列","id":"1757e8e3604740948352552326132f01","description":"<p>所谓最简真分数是指分子小于分母，且不能约分的分数。给定 n（1 < n < 200）个非负整数（每个整数不超过3位），哪两个整数分别作为分子和分母能够构成最简真分数。输出所有的最简真分数组合；若没有，则输出NO。\r<br></p>","aboutInput":"<p>第1行为正整数个数n\r<br>其后为n个非负整数，空格间隔。</p>","aboutOutput":"<p>输出所有最简真分数，分子小的排在前面；若分子相同，分母小的排在前面。各分数之间用逗号间隔。\r<br>若没有，则输出NO</p>"},{"title":"题目二 统计字符","id":"8f7db698f280414f84460c387876bfd6","description":"<p>输入一个长度小于1000字符串，统计这个字符串中‘*’ ‘@＇出现的次数。</p>","aboutInput":"<p>只有一行，一个包括可能包括了多个‘*’，’@’ </p>","aboutOutput":"<p>一共二行，分别输出二种符号的个数。</p>"},{"title":"甲流病人初筛","id":"eeb3ea42f61f4ddd98858758c34221d5","description":"<p>目前正是甲流盛行时期，为了更好地进行分流治疗，医院在挂号时要求对病人的体温和咳嗽情况进行检查，对于体温超过37.5度（含等于37.5度）并且咳嗽的病人初步判定为甲流病人（初筛）。现需要统计某天前来挂号就诊的病人中有多少人被初筛为甲流病人。</p>","aboutInput":"<p>第一行是某天前来挂号就诊的病人数n\r<br>其后有n行，每行是病人的信息，包括三个信息：姓名（字符串，不含空格，最多8个字符）、体温（float）、是否咳嗽（整数，1表示咳嗽，0表示不咳嗽）\r<br></p>","aboutOutput":"<p>行数不确定，但最后一行是一个整数m，表示被初筛为甲流的病人数，之前有m行，每行按输入顺序输出病人的姓名</p>"},{"title":"小于当前数的数","id":"3292e0e1ecec4a289287d567018b7b11","description":"<p>给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。\r<br>\r<br>换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] < nums[i]。</p>","aboutInput":"<p>第一行是一个整数 n，表示数组大小。\r<br>接下来 n 行，每行表示数组中的一个数。\r<br>\r<br>0 <= n <= 1000, 每个数都在int可以表示的范围内.</p>","aboutOutput":"<p>n 行，每行代表数组中比它小的数的个数。\r<br>\r<br>如果没有要输出的数据，输出\"None\"。</p>"},{"title":"记数问题","id":"c464027785c8456aab1af00e06dde997","description":"<p>试计算在区间 1 到 n 的所有整数中，数字 x(0 ≤ x ≤ 9)共出现了多少次？例如，在 1 到 11 中，即在 1、2、3、4、5、6、7、8、9、10、11 中，数字 1 出现了 4 次，数字2出现了1次。</p>","aboutInput":"<p>输入共 1 行，包含 2 个整数 n、x，之间用一个空格隔开。</p>","aboutOutput":"<p>输出共 1 行，包含一个整数，表示 x 出现的次数。</p>"},{"title":"换酒问题","id":"0d2d948fdedd4815a82ffc36b77a1138","description":"<p>小区便利店正在促销，用 a 个空酒瓶可以兑换一瓶新酒。你购入了 b 瓶酒。\r<br>\r<br>如果喝掉了酒瓶中的酒，那么酒瓶就会变成空的。\r<br>\r<br>请你计算最多能喝到多少瓶酒。</p>","aboutInput":"<p>用空格分开的两个整数，分别为a和b。\r<br>\r<br>1 < a <= 1000000000,\r<br>0 <= b <= 1000000000.</p>","aboutOutput":"<p>能喝到多少瓶酒。</p>"},{"title":"喝奶茶","id":"97fd297f285447b485345fe25252501b","description":"<p>计算概论班级一共有150名同学，学号分别为N1到N150。期末考试后，老师决定请部分同学喝奶茶，但是大家都很优秀，老师没办法进行挑选。于是助教们想了这样一种挑选幸运同学的方法：\r<br>给每位同学一个编号牌，仅在正面写有该名同学编号i，编号与学号数字相同，即学号为Ni的同学得到的编号牌正面写有数字i。\r<br>然后将所有编号牌正面朝上放到桌子上，同学们按照编号从小到大依次进行如下操作：\r<br>N1同学把所有编号牌翻面一次；\r<br>N2同学把编号为2、4、6、8 ... 148、150的编号牌翻面一次；\r<br>N3同学把编号为3、6、9 ... 147、150的编号牌翻面一次；\r<br>N4同学把编号为4、8、12 ... 144、148的编号牌翻面一次；\r<br>......\r<br>以此规律直到150名同学操作完为止，规定正面朝下的编号牌对应的同学能够喝老师请的奶茶。\r<br>请编写程序计算这些幸运的同学的人数，并按照数字从小到大的顺序依次输出其学号。</p>","aboutInput":"<p>无</p>","aboutOutput":"<p>第一行为幸运同学的学号，以空格间隔\r<br>第二行为幸运同学的人数</p>"},{"title":"回型加密-十进制版","id":"7e2503f4a95a474b8c860168f82bc856","description":"<p>计算概论班的同学发明了一种新的文本加密算法--将文本转化为十进制数并回型存放到矩阵里。\r<br>使用者事先约定好矩阵的行数与列数，并且规定文本中仅有大写字母和空格。他们事先按照这样的方法对文本进行编码：\r<br>空格 = 00\r<br>A = 01\r<br>B = 02\r<br>C = 03\r<br>......\r<br>Y = 25\r<br>Z = 26\r<br>然后，然后按照回型遍历的方法，将每个字符对应编码的2位十进制数依次填入矩阵中，多出来的位置使用0补充。例如，对于信息“PKU”，在矩阵行列数均是3的情况下，填充结果为：\r<br><img src=\"http://www.pkupc.cn/programming/problem/7e2503f4a95a474b8c860168f82bc856/pic.png\">\r<br>再按照正常遍历顺序将矩阵中的数字连起来，完成加密过程。也就是上述例子中的信息最终会被加密为：\r<br>161001012</p>","aboutInput":"<p>第一行为两个整数R和C，中间用一个空格隔开，分别表示行数和列数，其中1≤R, C≤10\r<br>第二行为一个只包含大写字母和空格的字符串，不会以空格开头。1≤字符串长度≤(R * C) / 2</p>","aboutOutput":"<p>一行，为加密后的十进制串</p>"},{"title":"小茗同学很方","id":"fef471d7649f412482bb43f7d0d23bcb","description":"<p>n(n不超过1000)个有蛀牙的小朋友被老师组织集体去拔牙，但是排队的时候由于所有小朋友都害怕拔牙，所以没人主动排在前面。这时老师想了一个有趣的方法，所有小朋友排成一列，按照顺序进行编号（编号从1开始），并从1依次进行报数，数到m的小朋友去拔牙，然后后面的小朋友再从1开始报数，下一个数到m的小朋友去拔牙…依此循环往复。小茗同学既不想先去拔牙，也不想被留到最后再拔，于是他决定第k(k<=n)个去拔。请你帮小茗同学想想他应该排在第几个位置才能“如愿以偿”。</p>","aboutInput":"<p>n m k</p>","aboutOutput":"<p>一个整数，小茗在队列中的位置(从1开始)</p>"},{"title":"有趣的二进制","id":"300eec7960eb41ae9aaec834335e22f4","description":"<p>最近北京大学药学院的小晨在计概课上学习到二进制之后对其产生了浓厚的兴趣，在每次操作仅能移动相邻的0和1的前提下，她想知道把一个二进制数转换成另一个二进制数的最小操作数。</p>","aboutInput":"<p>输入共三行：\r<br>\r<br>第一行为一个整数n (0 < n <= 200)，代表二进制数的位数\r<br>\r<br>第二行为第一个二进制数的每一位\r<br>\r<br>第三行为第二个二进制数的每一位</p>","aboutOutput":"<p>输出将第一个二进制数转换为第二个二进制数的最少操作数，如果答案不存在，则输出-1</p>"},{"title":"重排空格","id":"af7d880117294e568696ee3ba04e0543","description":"<p>给你一个字符串 text，该字符串由若干被空格包围的单词组成。每个单词由一个或者多个小写英文字母组成，并且两个单词之间至少存在一个空格。\r<br>请你重新排列空格，使每对相邻单词之间的空格数目都  相等  ，并尽可能  最大化  该数目。如果不能重新平均分配所有空格，请  将多余的空格放置在字符串末尾  ，这也意味着输出的字符串应当与原字符串的长度相等。</p>","aboutInput":"<p>一行由小写英文字母和空格组成的字符串。\r<br>\r<br>字符串长度不超过1000，至少包含一个单词。</p>","aboutOutput":"<p>一行和原字符串长度相等的字符串。</p>"},{"title":"谁能拿到最多的硬币","id":"d833d1dc7a2c4d3ea2d6b1ce56b50832","description":"<p>有n个硬币排成一排，每个硬币上用一个数字标识了它的价值。每次要你从最左边或者最右边拿出一个硬币。总共拿k次，写一个算法，使能拿到的硬币的价值和最大。</p>","aboutInput":"<p>输入包含两行，第一行为n， k；\r<br>第二行包含n个数字，表示n个硬币的价值。\r<br>\r<br>1 <= k <= n <= 100000\r<br>单个硬币的价值大于0且不超过10000.</p>","aboutOutput":"<p>输出可以拿到的k个硬币最大的价值和。</p>"},{"title":"n-gram串频统计","id":"594e2196e29143fa8bfd063dc032cb21","description":"<p>在文本分析中常用到n-gram串频统计方法，即，统计相邻的n 个单元（如单词、汉字、或者字符）在整个文本中出现的频率。假设有一个字符串，请以字符为单位按n-gram 统计长度为 n 的子串出现的频度，并输出最高频度以及频度最高的子串。设定所给的字符串不多于500个字符，且 1 < n <5。 如果有多个子串频度最高，则根据其在序列中第一次出现的次序输出多个，每行输出一个，如果最高频度不大于1，则输出 NO\r<br>\r<br>例如，n=3，所给的串是：abcdefabcd，\r<br>则，所有的 3-gram是：abc,bcd,cde,def,efa,fab,abc,bcd。最后面的cd不足以形成3-gram，则不考虑。这样，abc 和 bcd 都出现了2次，其余的只出现了1次，于是，输出结果应该是：\r<br>2\r<br>abc\r<br>bcd\r<br></p>","aboutInput":"<p>第一行为n\r<br>第二行为字符串\r<br></p>","aboutOutput":"<p>输出最高频度以及频度最高的所有子串。</p>"},{"title":"过河问题","id":"f4a4e2f96e494992921fcbbb180561f5","description":"<p>n个人想要过一条河,河上只有一条小船,这条船只能容纳两个人,因此这n个人想要全部过河的话就必须来回很多次.每个人划船的速度有所不同,两个人一起的时候船的速度是划得较慢的人的速度.请你找出一种策略使得他们在尽可能短的时间内过河.</p>","aboutInput":"<p>第一行包括一个正整数t,表示有t组数据.\r<br>每组数据两行,第一行是人数n(n&lt;=1000),第二行是n个人各自过河所需的时间(不大于100).</p>","aboutOutput":"<p>输出最短时间</p>"},{"title":"1052 花生问题","id":"e90207884099480bb850f80866c54e2a","description":"<p>鲁宾逊先生有一只宠物猴，名叫多多。这天，他们两个正沿着乡间小路散步，突然发现路边的告示牌上贴着一张小小的纸条：“欢迎免费品尝我种的花生！??熊字”。 \r<br>\r<br>鲁宾逊先生和多多都很开心，因为花生正是他们的最爱。在告示牌背后，路边真的有一块花生田，花生植株整齐地排列成矩形网格（如图1）。有经验的多多一眼就能看出，每棵花生植株下的花生有多少。例如在图2中的花生田里，只有位于(2, 5), (3, 7), (4, 2), (5, 4)的植株下长有花生，个数分别为13, 7, 15, 9。我们假定多多在每个单位时间内，可以做下列四件事情中的一件：(1)从路边跳到最靠近路边（即第一行）的某棵花生植株；(2)从一棵植株跳到前后左右与之相邻的另一棵植株；(3)采摘一棵植株下的花生；(4)从最靠近路边（即第一行）的某棵花生植株跳回路边。 \r<br>\r<br><img src=\"1928_1.jpg\">\r<br>\r<br>为了训练多多的算术，鲁宾逊先生说：“你先找出花生最多的植株，去采摘它的花生；然后再找出剩下的植株里花生最多的，去采摘它的花生；依此类推，不过你一定要在我限定的时间内回到路边。” 例如在图2中，沿着图示的路线，多多在21个单位时间内，最多可以采到37个花生。 \r<br>\r<br>现在给定一块花生田的大小和花生的分布，请问在限定时间内，多多最多可以采到多少个花生？注意可能只有部分植株下面长有花生，假设这些植株下的花生个数各不相同。</p>","aboutInput":"<p>输入第一行代表组数T。\r<br>之后每组第一行包括三个整数，M, N和K，用空格隔开；表示花生田的大小为M * N（1 <= M, N <= 20），多多采花生的限定时间为K（0 <= K <= 1000）个单位时间。接下来的M行，每行包括N个非负整数，也用空格隔开；第i + 1行的第j个整数Pij（0 <= Pij <= 500）表示花生田里植株(i, j)下花生的数目，0表示该植株下没有花生。</p>","aboutOutput":"<p>输出包括T组，每一行代表一组，只包含一个整数，即在限定时间内，多多最多可以采到花生的个数。</p>"},{"title":"循环数","id":"1e4611f6c2b24bf3ae8305bc9c8a557f","description":"<p>当一个N位的整数X满足下列条件时，称其为循环数：X与任意一个整数1≤Y ≤ N相乘时，都将产生一个X的“循环”。即：分别将这两个整数的第1位数字与最后1位数字连在一起，可以得到一个相同的数字循环；当然两个整数在该数字循环中的起始位置不同。例如，142857是一个循环数 \r<br>142857 *1 = 142857 \r<br>142857 *2 = 285714 \r<br>142857 *3 = 428571 \r<br>142857 *4 = 571428 \r<br>142857 *5 = 714285 \r<br>142857 *6 = 857142</p>","aboutInput":"<p>写一个程序判断一个整数是否是循环数。输入文件是一个整数序列，每个整数长度为2~60。注意：每个整数前面的零被看作是该整数的一部分，在计算N时要统计。例如“01”是一个2位的整数，而“1”是一个1位的整数。</p>","aboutOutput":"<p>对每个输入整数，输出一行，说明该整数是否是循环数。</p>"},{"title":"1140 最短前缀","id":"c5e8bb080d2041ff8a7d34c5dbe02c2c","description":"<p>一个字符串的前缀是从该字符串的第一个字符起始的一个子串。例如 \"carbon\"的字串是: \"c\", \"ca\", \"car\", \"carb\", \"carbo\", 和 \"carbon\"。注意到这里我们不认为空串是字串, 但是每个非空串是它自身的字串. 我们现在希望能用前缀来缩略的表示单词。例如, \"carbohydrate\" 通常用\"carb\"来缩略表示. 现在给你一组单词, 要求你找到唯一标识每个单词的最短前缀 \r<br>在下面的例子中，\"carbohydrate\" 能被缩略成\"carboh\", 但是不能被缩略成\"carbo\" (或其余更短的前缀) 因为已经有一个单词用\"carbo\"开始 \r<br>一个精确匹配会覆盖一个前缀匹配，例如，前缀\"car\"精确匹配单词\"car\". 因此 \"car\" 是 \"car\"的缩略语是没有二义性的 , “car”不会被当成\"carriage\"或者任何在列表中以\"car\"开始的单词.</p>","aboutInput":"<p>输入包括至少2行，至多1000行. 每行包括一个以小写字母组成的单词，单词长度至少是1，至多是20.</p>","aboutOutput":"<p>输出的行数与输入的行数相同。每行输出由相应行输入的单词开始，后面跟着一个空格接下来是相应单词的没有二义性的最短前缀标识符。</p>"},{"title":"流感","id":"276d231c9c6947268d75ebfd3a9e16e4","description":"<p>    学校里一共有n个学生。这n个学生里一共有m对朋友关系。\r<br>    在流感发作期，每个健康学生都要看望当天他生病的朋友（如果有的话），并在第二天被传染上疾病（除非他在免疫期内）；\r<br>    每个生病的学生在第二天都会痊愈，并在这一天具有免疫性。从第三天起，看望生病的朋友将再次使他染上流感。\r<br>    初始时（第一天），只有一个学生患有流感。试问多少天后流感会自动结束。\r<br></p>","aboutInput":"<p>第一行输入两个正整数n和m。\r<br>接下来m行每行两个正整数x,y，表示编号为x的学生和编号为y的学生是一对朋友。输入数据保证每一对朋友关系只描述一次。\r<br>最后一行输入一个正整数，代表初始时患有流感的学生的编号。\r<br>\r<br>n,m <= 100,000。\r<br></p>","aboutOutput":"<p>输出多少天后流感会结束。\r<br>\r<br>如果天数超过2,000,000,000，则视为流感不会结束，输出-1。\r<br></p>"},{"title":"破解密码","id":"b513c573a31749ed9501ca809e296a83","description":"<p>考虑一种加密方式，它需要一个任意长度的原文 m 和秘钥 key，其中要求原文和秘钥只包含大写和小写的英文字符。\r<br>\r<br>首先定义字符之间的加密，用字符 a 去加密字符 b 的结果是：\r<br>1. 首先把 a 和 b 转成数字 x 和 y。转换的规则是，小写字母 a 到 z 依次对应 0 到 25，大写字母依次对应 26 到 51。\r<br>2. 计算 x 和 y 的和 z，对 52 取模，即计算 (x + y) % 52。\r<br>3. 返回数字 z 对应的字符。\r<br>\r<br>现在来讲如何用秘钥 key 来加密原文 m：\r<br>1. 如果秘钥的 key 的长度小于 m，那么不停重复 key 直到长度不小于 m 为止。举例来说，如果原文是 beijing，秘钥是 PKUSAA，那么秘钥需要被重复称 PKUSAAPKUSAA。\r<br>2. 假设原文的长度是 n，那么对于每一个 1~n 的数字 i，都用 key 的第 i 个字符去加密 m 的第 i 个字符。\r<br>3. 返回结果。\r<br>\r<br>那么用 PKUSAA 去加密 beijing 的结果就是：QOcbINV\r<br>\r<br>现在火山哥有 n 个字符串，s[1] 到 s[n]，他对这些字符串做了 m 次加密操作：第 i 次加密操作用第 s[x[i]] 去加密 s[y[i]]，并把 s[y[i]] 替换成加密结果。\r<br>\r<br>现在依次给出 m 次加密操作，以及加密操作结束后每一个字符串的模样，你可以还原出这 n 个字符串原来的模样吗？</p>","aboutInput":"<p>第一行输入两个整数 n,m (1 <= n,m <= 1000)。\r<br>\r<br>接下来 m 行每行输入两个整数 x[i],y[i]，表示依次加密操作，保证 x[i] 不等于 y[i]。\r<br>\r<br>接下来 n 行每行输入一个字符串，表示加密最后的结果。字符串的长度在 1 到 100 之间，只包含大小写英文字符。</p>","aboutOutput":"<p>输出 n 行，每行一个字符串，表示原本的字符串。</p>"}]},{"title":"抄程序练习（给没有基础的同学，选做，不计入成绩）","id":"5c6bf4321fe64e2a8d7dc26f666d4d6e","problems":[{"title":"实现冒泡排序","id":"5d36bf15dfb140abbaad9dcf47ac85d0","description":"<p>请根据自己的理解编写冒泡排序算法，数组大小1000以内</p>","aboutInput":"<p>第一行是n，表示数组的大小\r<br>接着n行是数组的n个元素</p>","aboutOutput":"<p>排序之后的结果\r<br>一个元素一行</p>"},{"title":"习题(8-10) 分数求和","id":"a68317b5106b4120899ca477a889fb29","description":"<p>输入n个分数并对他们求和，用约分之后的最简形式表示。\r<br>比如：\r<br>q/p = x1/y1  + x2/y2 +....+ xn/yn，\r<br>q/p要求是归约之后的形式。\r<br>如：5/6已经是最简形式，3/6需要规约为1/2, 3/1需要规约成3，10/3就是最简形式。\r<br>\r<br>PS:分子和分母都没有为0的情况，也没有出现负数的情况</p>","aboutInput":"<p>第一行的输入n,代表一共有几个分数需要求和\r<br>接下来的n行是分数</p>","aboutOutput":"<p>输出只有一行，即归约后的结果</p>"},{"title":"大整数加法","id":"bd646775285c4543a3626e514555093d","description":"<p>求两个不超过400位的非负整数的和</p>","aboutInput":"<p>首先输入N，即测试数据的组数\r<br>每组测试数据输入：\r<br>一行，每行是两个不超过400位的非负整数，没有多余的前导0，两个整数之间用空格隔开\r<br></p>","aboutOutput":"<p>N行，输出两个大整数的和，没有前导0</p>"}]}]